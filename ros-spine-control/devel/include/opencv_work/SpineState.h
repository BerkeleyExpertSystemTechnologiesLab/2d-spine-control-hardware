// Generated by gencpp from file opencv_work/SpineState.msg
// DO NOT EDIT!


#ifndef OPENCV_WORK_MESSAGE_SPINESTATE_H
#define OPENCV_WORK_MESSAGE_SPINESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencv_work
{
template <class ContainerAllocator>
struct SpineState_
{
  typedef SpineState_<ContainerAllocator> Type;

  SpineState_()
    : rotation(0.0)
    , com1()
    , com2()  {
    }
  SpineState_(const ContainerAllocator& _alloc)
    : rotation(0.0)
    , com1(_alloc)
    , com2(_alloc)  {
  (void)_alloc;
    }



   typedef double _rotation_type;
  _rotation_type rotation;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _com1_type;
  _com1_type com1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _com2_type;
  _com2_type com2;





  typedef boost::shared_ptr< ::opencv_work::SpineState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_work::SpineState_<ContainerAllocator> const> ConstPtr;

}; // struct SpineState_

typedef ::opencv_work::SpineState_<std::allocator<void> > SpineState;

typedef boost::shared_ptr< ::opencv_work::SpineState > SpineStatePtr;
typedef boost::shared_ptr< ::opencv_work::SpineState const> SpineStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_work::SpineState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_work::SpineState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opencv_work

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'opencv_work': ['/home/jmadden/2d-spine-control-hardware/ros-spine-control/src/opencv_work/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opencv_work::SpineState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_work::SpineState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_work::SpineState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_work::SpineState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_work::SpineState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_work::SpineState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_work::SpineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c4ed841ebd6c1ed336e4b4bb0dbbca7";
  }

  static const char* value(const ::opencv_work::SpineState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c4ed841ebd6c1edULL;
  static const uint64_t static_value2 = 0x336e4b4bb0dbbca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_work::SpineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_work/SpineState";
  }

  static const char* value(const ::opencv_work::SpineState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_work::SpineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rotation\n\
float64[] com1\n\
float64[] com2\n\
";
  }

  static const char* value(const ::opencv_work::SpineState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_work::SpineState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotation);
      stream.next(m.com1);
      stream.next(m.com2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpineState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_work::SpineState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_work::SpineState_<ContainerAllocator>& v)
  {
    s << indent << "rotation: ";
    Printer<double>::stream(s, indent + "  ", v.rotation);
    s << indent << "com1[]" << std::endl;
    for (size_t i = 0; i < v.com1.size(); ++i)
    {
      s << indent << "  com1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.com1[i]);
    }
    s << indent << "com2[]" << std::endl;
    for (size_t i = 0; i < v.com2.size(); ++i)
    {
      s << indent << "  com2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.com2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_WORK_MESSAGE_SPINESTATE_H
